/* ===== MIXINS FOR HASEEB'S PORTFOLIO ===== */

// First define the breakpoints map
$breakpoints: (
  xs: 0,
  sm: 576px,
  md: 768px,
  lg: 992px,
  xl: 1200px,
  xxl: 1400px
);

/* ===== RESPONSIVE BREAKPOINTS ===== */
@mixin respond-to($breakpoint) {
  @if map-has-key($breakpoints, $breakpoint) {
    @media (min-width: map-get($breakpoints, $breakpoint)) {
      @content;
    }
  } @else {
    @warn "Unfortunately, no value could be retrieved from `#{$breakpoint}`. "
        + "Available breakpoints are: #{map-keys($breakpoints)}.";
  }
}

@mixin respond-below($breakpoint) {
  @if map-has-key($breakpoints, $breakpoint) {
    @media (max-width: map-get($breakpoints, $breakpoint)) {
      @content;
    }
  } @else {
    @warn "Unfortunately, no value could be retrieved from `#{$breakpoint}`. "
        + "Available breakpoints are: #{map-keys($breakpoints)}.";
  }
}

/* ===== FLEXBOX UTILITIES ===== */
@mixin flex-center {
  display: flex;
  justify-content: center;
  align-items: center;
}

@mixin flex-between {
  display: flex;
  justify-content: space-between;
  align-items: center;
}

@mixin flex-column {
  display: flex;
  flex-direction: column;
}

@mixin flex-column-center {
  @include flex-column;
  justify-content: center;
  align-items: center;
}

/* ===== GRID UTILITIES ===== */
@mixin grid-center {
  display: grid;
  place-items: center;
}

@mixin grid-auto-fit($min-width: 250px, $gap: 1rem) {
  display: grid;
  grid-template-columns: repeat(auto-fit, minmax($min-width, 1fr));
  gap: $gap;
}

@mixin grid-auto-fill($min-width: 250px, $gap: 1rem) {
  display: grid;
  grid-template-columns: repeat(auto-fill, minmax($min-width, 1fr));
  gap: $gap;
}

/* ===== POSITIONING ===== */
@mixin absolute-center {
  position: absolute;
  top: 50%;
  left: 50%;
  transform: translate(-50%, -50%);
}

@mixin absolute-full {
  position: absolute;
  top: 0;
  left: 0;
  width: 100%;
  height: 100%;
}

@mixin fixed-full {
  position: fixed;
  top: 0;
  left: 0;
  width: 100vw;
  height: 100vh;
}

/* ===== ANIMATIONS & TRANSITIONS ===== */
@mixin transition($properties...) {
  transition: $properties;
}

@mixin smooth-transition($duration: 0.3s) {
  transition: all $duration ease-in-out;
}

@mixin hover-lift {
  transition: transform var(--transition-base), box-shadow var(--transition-base);
  
  &:hover {
    transform: translateY(-4px);
    box-shadow: var(--shadow-lg);
  }
}

@mixin scale-on-hover($scale: 1.05) {
  transition: transform var(--transition-base);
  
  &:hover {
    transform: scale($scale);
  }
}

/* ===== BUTTON MIXINS ===== */
@mixin button-base {
  display: inline-flex;
  align-items: center;
  justify-content: center;
  padding: 0.75rem 1.5rem;
  border: none;
  border-radius: var(--radius-lg);
  font-family: var(--font-primary);
  font-weight: 500;
  text-decoration: none;
  cursor: pointer;
  transition: all var(--transition-base);
  outline: none;
  
  &:focus {
    outline: 2px solid var(--primary-color);
    outline-offset: 2px;
  }
  
  &:disabled {
    opacity: 0.6;
    cursor: not-allowed;
  }
}

@mixin button-primary {
  @include button-base;
  background: var(--gradient-primary);
  color: var(--text-inverse);
  
  &:hover:not(:disabled) {
    transform: translateY(-2px);
    box-shadow: var(--shadow-lg);
  }
}

@mixin button-secondary {
  @include button-base;
  background: transparent;
  color: var(--primary-color);
  border: 2px solid var(--primary-color);
  
  &:hover:not(:disabled) {
    background: var(--primary-color);
    color: var(--text-inverse);
  }
}

@mixin button-ghost {
  @include button-base;
  background: transparent;
  color: var(--text-primary);
  
  &:hover:not(:disabled) {
    background: var(--bg-secondary);
  }
}

/* ===== TEXT UTILITIES ===== */
@mixin text-gradient($gradient: var(--gradient-primary)) {
  background: $gradient;
  -webkit-background-clip: text;
  -webkit-text-fill-color: transparent;
  background-clip: text;
}

@mixin text-shadow($shadow: 0 2px 4px rgba(0, 0, 0, 0.1)) {
  text-shadow: $shadow;
}

@mixin truncate {
  overflow: hidden;
  text-overflow: ellipsis;
  white-space: nowrap;
}

@mixin line-clamp($lines: 2) {
  display: -webkit-box;
  -webkit-line-clamp: $lines;
  -webkit-box-orient: vertical;
  overflow: hidden;
}

/* ===== CARD MIXINS ===== */
@mixin card-base {
  background: var(--bg-card);
  border-radius: var(--radius-xl);
  box-shadow: var(--shadow-base);
  overflow: hidden;
  transition: all var(--transition-base);
}

@mixin card-hover {
  &:hover {
    transform: translateY(-4px);
    box-shadow: var(--shadow-xl);
  }
}

@mixin glassmorphism {
  background: rgba(255, 255, 255, 0.1);
  backdrop-filter: blur(10px);
  border: 1px solid rgba(255, 255, 255, 0.2);
  border-radius: var(--radius-xl);
}

/* ===== OVERLAY MIXINS ===== */
@mixin overlay($color: rgba(0, 0, 0, 0.5)) {
  position: relative;
  
  &::before {
    content: '';
    @include absolute-full;
    background: $color;
    z-index: 1;
  }
  
  > * {
    position: relative;
    z-index: 2;
  }
}

/* ===== SCROLLBAR STYLING ===== */
@mixin custom-scrollbar($width: 8px, $track-color: var(--bg-secondary), $thumb-color: var(--primary-color)) {
  &::-webkit-scrollbar {
    width: $width;
  }
  
  &::-webkit-scrollbar-track {
    background: $track-color;
  }
  
  &::-webkit-scrollbar-thumb {
    background: $thumb-color;
    border-radius: $width / 2;
    
    &:hover {
      background: var(--primary-hover);
    }
  }
}

/* ===== ASPECT RATIO ===== */
@mixin aspect-ratio($width: 16, $height: 9) {
  position: relative;
  
  &::before {
    content: '';
    display: block;
    padding-bottom: percentage($height / $width);
  }
  
  > * {
    @include absolute-full;
  }
}

/* ===== VISUALLY HIDDEN ===== */
@mixin visually-hidden {
  position: absolute;
  width: 1px;
  height: 1px;
  padding: 0;
  margin: -1px;
  overflow: hidden;
  clip: rect(0, 0, 0, 0);
  white-space: nowrap;
  border: 0;
}